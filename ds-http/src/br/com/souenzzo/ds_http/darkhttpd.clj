(ns br.com.souenzzo.ds-http.darkhttpd
  (:require [br.com.souenzzo.ds-http :as http]
            [clojure.java.io :as io]
            [clojure.string :as string])
  (:import (java.time Instant Clock)
           (java.io File)))
(set! *warn-on-reflection* true)
(defonce http-state (atom nil))

(def server-name (str *ns*))

(defprotocol IFS
  (file [this path]))

(defprotocol IFile
  (list-files [this])
  (file? [this])
  (directory? [this]))

(extend-protocol IFile
  File
  (list-files [this] (.listFiles this))
  (file? [this] (.isFile this))
  (directory? [this] (.isDirectory this)))

(defn hiccup
  [html]
  (cond
    (and (coll? html)
         (keyword? (first html))) (let [[tag & body] html]
                                    (str "<" (name tag) ">"
                                         (hiccup body)
                                         "</" (name tag) ">"))
    (coll? html) (string/join (map hiccup html))
    :else (str html)))

(defn handler
  [{::keys             [clock fs]
    :ring.request/keys [path]}]
  (let [date (str (Instant/now clock))
        f (file fs (str "." path))]
    (cond
      (file? f) {:body    (slurp f)
                 :headers {"Date"          date
                           "Server"        server-name
                           "Accept-Ranges" "bytes"
                           "Keep-Alive"    "timeout=60"
                           #_#_"Content-Length" "209"
                           "Content-Type"  "application/octet-stream"
                           "Last-Modified" "Sat, 29 Aug 2020 01:48:51 GMT"}
                 :status  200}
      (directory? f) {:body    (-> [:html
                                    [:head [:title path]]
                                    [:body
                                     [:h1 path]
                                     [:tt]
                                     [:pre
                                      [:tt
                                       [:a {:href ".."} ".."]
                                       "/\n"
                                       (for [f (list-files f)]
                                         [[:a {:href "a"} "a"]
                                          (if (file? f)
                                            (str "         " (count (.getBytes (slurp f))) "\n")
                                            "/\n")])]]
                                     [:tt]
                                     [:hr]
                                     "\nGenerated by " server-name " on " date "\n"]]
                                   hiccup)
                      :headers {"Date"          date
                                "Server"        server-name
                                "Accept-Ranges" "bytes"
                                "Keep-Alive"    "timeout=60"
                                #_#_"Content-Length" "209"
                                "Content-Type"  "text/html; charset=UTF-8"}
                      :status  200}
      :else {:body    (-> [:html
                           [:head
                            [:title "404 Not Found"]]
                           [:body
                            [:h1 "Not Found"]
                            "\nThe URL you requested (" path ") was not found.\n"
                            [:hr]
                            "\nGenerated by " server-name " on Sat, " date "\n"]]
                          hiccup)
             :headers {"Date"          date
                       "Server"        server-name
                       "Accept-Ranges" "bytes"
                       "Keep-Alive"    "timeout=60"
                       #_#_"Content-Length" "209"
                       "Content-Type"  "text/html; charset=UTF-8"}
             :status  404})))

(defn -main
  []
  (swap! http-state
         (fn [st]
           (some-> st http/stop)
           (http/start {:ring.request/server-port 8080
                        ::clock                   (Clock/systemUTC)
                        ::fs                      (reify
                                                    IFS
                                                    (file [this path]
                                                      (io/file path)))
                        ::http/handler            handler}))))